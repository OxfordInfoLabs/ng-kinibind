{"version":3,"sources":["ng://ng-kinibind/shared/kinibind-request.service.ts","ng://ng-kinibind/bind/kinibind-bind.directive.ts","ng://ng-kinibind/filter/kinibind-filter.component.ts","ng://ng-kinibind/filter-element/kinibind-filter-element.directive.ts","ng://ng-kinibind/bind-save/kinibind-save.directive.ts","ng://ng-kinibind/form/kinibind-form.directive.ts","ng://ng-kinibind/validators/match-regex.directive.ts","ng://ng-kinibind/validators/remote-validate.directive.ts","ng://ng-kinibind/action/kinibind-action.directive.ts","ng://ng-kinibind/ng-kinibind.module.ts","ng://ng-kinibind/shared/kinibind.model.ts"],"names":["KinibindRequestService","http","this","jsonpRequestError","EventEmitter","prototype","makeRequest","method","url","options","request","makePostRequest","params","post","makeGetRequest","get","makeJsonpRequest","headers","HttpHeaders","Content-Type","callback","pipe","map","data","catchError","err","error","Error","console","message","status","_this","emit","EMPTY","Injectable","HttpClient","KinibindBindDirective","kbRequest","ngOnInit","reloadTrigger","subscribe","filters","filterObject","pageOptions","index","changes","merge","startWith","switchMap","getData","_.isPlainObject","results","_.isArray","totalCount","length","onLoadError","of","item","value","onLoad","success","postParams","sourceParams","_.isEmpty","size","pageSize","page","Directive","args","selector","Input","Output","KinibindFilterComponent","initialFilterValues","_.extend","filterValues","updateFilter","selected","multiple","Array","isArray","filter","push","indexOf","splice","next","seedColumn","Component","template","styles","KinibindFilterElementDirective","filterValue","constructFilterObject","newValue","prefix","suffix","filterColumns","columns","split","mode","filterMode","dateFormat","filterDateFormat","exportAs","KinibindSaveDirective","router","onClick","$event","save","model","storeURL","withCredentials","toPromise","then","savedRoute","navigate","onSave","catch","onError","Router","HostListener","KinibindFormDirective","ngForm","initSourceData","initSaveData","observableOf","sourceMethod","ngSubmit","dirtyOnly","dirty_1","_.forEach","form","controls","control","key","dirty","saveData","dirtyObjects_1","forEach","dirtyKey","splitKey","dirtyIndex","_.find","isNaN","Number","storeMethod","NgForm","MatchRegexDirective","validate","matchRegex","matchRegexValidator","match","test","RegExp","providers","provide","NG_VALIDATORS","useExisting","multi","NojsRemoteValidateDirective","remoteValidate","remoteValidateValidator","remoteURL","remoteParams","includes","valid","Promise","resolve","NG_ASYNC_VALIDATORS","KinibindActionDirective","clickEvent","event","preventDefault","stopPropagation","started","actionParams","actionURL","result","completed","NgKinibindModule","NgModule","imports","CommonModule","HttpClientModule","FormsModule","HttpClientJsonpModule","declarations","exports","KinibindModel","limit","offset","Subject","setPageOptions","pageIndex"],"mappings":"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","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class KinibindRequestService {\n\n    public jsonpRequestError: EventEmitter<HttpErrorResponse>;\n\n    constructor(private http: HttpClient) {\n        this.jsonpRequestError = new EventEmitter<HttpErrorResponse>();\n    }\n\n    public makeRequest(method: string, url: string, options: any = {}) {\n        return this.http.request(method, url, options);\n    }\n\n    public makePostRequest(url: string, params: any, options: any = {}) {\n        return this.http.post(url, params, options);\n    }\n\n    public makeGetRequest(url: string, options: any = {}) {\n        return this.http.get(url, options);\n    }\n\n    public makeJsonpRequest(url: string, params: any) {\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n        const options: any = { headers: headers };\n\n        // Set callback param for the JSONP request.\n        params.callback = 'JSONP_CALLBACK';\n\n        options.params = params;\n\n        return this.http.request('jsonp', url, options)\n            .pipe(map(data => {\n                return data;\n            }), catchError((err: HttpErrorResponse) => {\n\n                if (err.error instanceof Error) {\n                    // A client-side or network error occurred. Handle it accordingly.\n                    console.error('An error occurred:', err.error.message);\n                } else {\n                    // The backend returned an unsuccessful response code.\n                    // The response body may contain clues as to what went wrong,\n                    console.error(`Backend returned code ${err.status}, body was: ${err.error}`);\n                }\n\n                this.jsonpRequestError.emit(err);\n\n                return EMPTY;\n            }));\n    }\n\n}\n","import {\n    Directive, EventEmitter, Input, OnInit, Output\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, merge, of } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { switchMap } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\nimport { KinibindModel } from '../shared/kinibind.model';\nimport { map } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\n\n/**\n *\n * @name NoJS Bind\n * @docType Directive\n * @tag nojs-bind\n * @templateData attributeData\n *\n * @description The NoJS Bind Directive allows for rapid binding of a JSON data source to a model. This should primarily be used for drawing lists of data, where the data does not change as the result of user input. However, this can be used in conjunction with nojsBindSave to send any model changes back to the server. If you are looking to implement Form behaviour, then use nojsForm.\n *\n * @attributes-source-description The URL to load the data asynchronously. Data should be returned in JSON format as either:\n * @attributes-source-type String\n * @attributes-source-value https://someservice/results.json\n * @attributes-source-code {id: 1, name: testing} OR<br>[{id: 1, name: test1}, {id: 2, name: test2}] OR<br>{results: [{id: 1...}, {id: 2...}], totalCount: 2}\n * @attributes-sourceParams-description Parameters used to send back to the server in the post request.\n * @attributes-sourceParams-type Object.\n * @attributes-sourceParams-value {param: value}\n * @attributes-model-description The object that the results from the source will bind itself to.\n * @attributes-model-type NojsBindModel\n * @attributes-model-value data\n * @attributes-onLoad-description Event raised once the data has been loaded successfully.\n * @attributes-onLoad-type method\n * @attributes-onLoadError-description Event raised in the scenario where there is an error loading the data.\n * @attributes-onLoadError-type method\n *\n *\n * @exampleDescription Create an element using the <nojs-bind> tag\n * <nojs-bind source=\"https://someservice/results.json\" [sourceParams]=\"{userId: 100}\"\n *   [model]=\"data\">\n *\n *   <div *ngFor=\"let item of data.results\">\n *     <span>{{item.id}}</span>\n *     <span>{item.name}}</span>\n *     <span>{{item.date}}</span>\n *     <span>{{item.address}}</span>\n *   </div>\n *\n * </nojs-bind>\n *\n */\n@Directive({\n    selector: 'kb-bind'\n})\nexport class KinibindBindDirective implements OnInit {\n\n    @Input('source') url: string;\n    @Input('method') method: string;\n    @Input('sourceParams') sourceParams: any;\n    @Input('model') data: KinibindModel;\n    @Input('withCredentials') withCredentials: boolean;\n    @Input('reloadTrigger') reloadTrigger: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output('onLoad') onLoad: EventEmitter<any> = new EventEmitter<any>();\n    @Output('onLoadError') onLoadError: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private http: HttpClient,\n                private kbRequest: KinibindRequestService) {\n\n    }\n\n    ngOnInit(): void {\n        // If we have a reload trigger listen for changes and reset the data model.\n        this.reloadTrigger.subscribe(() => {\n            this.data.filters.filterObject = {};\n            this.data.pageOptions.index = 1;\n        });\n\n        this.data.filters.changes.subscribe(() => this.data.pageOptions.index = 1);\n\n        merge(this.data.filters.changes, this.data.pageOptions.changes, this.reloadTrigger)\n            .pipe(\n                startWith({}),\n                switchMap(() => {\n                    return this.getData();\n                }),\n                map((data: any) => {\n                    if (_.isPlainObject(data)) {\n                        if (data.results && _.isArray(data.results)) {\n                            this.data.totalCount = data.totalCount || data.results.length;\n                            return data.results;\n                        } else {\n                            return data;\n                        }\n                    } else if (_.isArray(data)) {\n                        this.data.totalCount = data.length;\n                        return data;\n                    } else {\n                        return data;\n                    }\n                }),\n                catchError((error) => {\n                    this.onLoadError.emit(error);\n                    return of([]);\n                })\n            ).subscribe(data => {\n            if (_.isPlainObject(data)) {\n                this.data.item = data;\n            } else if (_.isArray(data)) {\n                this.data.results = data;\n            } else {\n                this.data.value = data;\n            }\n            this.onLoad.emit({ success: true });\n        });\n    }\n\n    private getData(): Observable<any> {\n        const postParams: any = this.sourceParams || {};\n\n        if (!_.isEmpty(this.data.filters.filterObject)) {\n            postParams.filters = this.data.filters.filterObject;\n        }\n\n        if (this.data.pageOptions.size) {\n            postParams.pageSize = this.data.pageOptions.size;\n            postParams.page = this.data.pageOptions.index;\n        }\n\n        const method = this.method ? this.method : (this.sourceParams ? 'POST' : 'GET');\n\n        return this.kbRequest.makeRequest(method, this.url, {params: postParams});\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as _ from 'lodash';\nimport { KinibindModel } from '../shared/kinibind.model';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\n\n/**\n * @name NoJS Filter\n * @docType Component\n * @tag nojs-filter\n * @templateData attributeData\n *\n * @description Filtering component that generates filter options based on the passed in source. Selecting any of these options will update the filter object from [model] which will trigger a server side filter of the data.\n *\n * @attributes-source-description The URL to call to retrieve the filter options from the server. Return data expected in the following format:\n * @attributes-source-type String\n * @attributes-source-value https://someservice/filters.json\n * @attributes-source-code [{count: 2, label: Option1: value: 1},<br>{count: 4, label: Option2: value: 2}]\n * @attributes-model-description The object that the results from the source will bind itself to.\n * @attributes-model-type NojsBindModel\n * @attributes-model-value data\n * @attributes-multiple-description Allow multiple filter options to be selected at the same time.\n * @attributes-multiple-type Boolean\n * @attributes-filter-description The name of the database field that the filter will be applied to.\n * @attributes-filter-type String\n * @attributes-showCount-description Toggle that shows the count of results for the given filter.\n * @attributes-showCount-type Boolean\n * @attributes-initialFilterValues-description Set filter values upon component initialisation.\n * @attributes-initialFilterValues-type JSON Object\n * @attributes-initialFilterValues-value {someValue: true}\n *\n * <nojs-filter source=\"https://someservice/filters.json\"\n * [initialFilterValues]=\"{complete: true}\"\n * [model]=\"data\" multiple=\"true\" filter=\"total\" showCount=\"true\">\n * </nojs-filter>\n */\n@Component({\n    selector: 'kb-filter',\n    template: `<div *ngFor=\"let filterValue of filterValues\">\n    <div *ngIf=\"multiple\">\n        <input type=\"checkbox\" (change)=\"updateFilter(filterValue)\"/>\n        {{filterValue.label}}\n        <span *ngIf=\"showCount\">({{filterValue.count}})</span>\n    </div>\n\n    <a *ngIf=\"!multiple\" href=\"javascript:void(0)\"\n       [style.font-weight]=\"filterValue.selected ? 'bold' : 'normal'\" (click)=\"updateFilter(filterValue)\">\n        {{filterValue.label}}\n        <span *ngIf=\"showCount\">({{filterValue.count}})</span>\n    </a>\n</div>\n`,\n    styles: [``]\n})\nexport class KinibindFilterComponent implements OnInit {\n\n    @Input('source') url: string;\n    @Input('model') data: KinibindModel;\n    @Input('multiple') multiple: boolean;\n    @Input('showCount') showCount: boolean;\n    @Input('filter') filter: string;\n    @Input('initialFilterValues') initialFilterValues: any;\n    @Input('withCredentials') withCredentials: boolean;\n\n    public filterValues: any = [];\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    ngOnInit() {\n        if (this.initialFilterValues) {\n            this.data.filters.filterObject = _.extend(this.initialFilterValues, this.data.filters.filterObject);\n        }\n        this.getData(this.data.filters.filterObject).subscribe(data => {\n            this.filterValues = data;\n        });\n    }\n\n    public updateFilter(filterObject) {\n        filterObject.selected = !filterObject.selected;\n        if (!this.data.filters.filterObject) {\n            this.data.filters.filterObject = {};\n        }\n        if (this.multiple) {\n            if (filterObject.selected) {\n                if (!Array.isArray(this.data.filters.filterObject[this.filter])) {\n                    this.data.filters.filterObject[this.filter] = [filterObject.value];\n                } else {\n                    this.data.filters.filterObject[this.filter].push(filterObject.value);\n                }\n            } else {\n                const index = this.data.filters.filterObject[this.filter].indexOf(filterObject.value);\n                if (index > -1) {\n                    this.data.filters.filterObject[this.filter].splice(index, 1);\n                }\n\n                if (!this.data.filters.filterObject[this.filter].length) {\n                    delete this.data.filters.filterObject[this.filter];\n                }\n            }\n        } else {\n            if (filterObject.selected) {\n                this.data.filters.filterObject[this.filter] = filterObject.value;\n            } else {\n                delete this.data.filters.filterObject[this.filter];\n            }\n        }\n\n        this.getData(this.data.filters.filterObject);\n        this.data.filters.changes.next(true);\n    }\n\n    private getData(filters): Observable<any> {\n        const postParams: any = {\n            seedColumn: this.filter,\n            filters: filters\n        };\n\n        return this.kbRequest.makePostRequest(this.url, postParams);\n    }\n}\n","import { Directive, Input } from '@angular/core';\nimport { KinibindModel } from '../shared/kinibind.model';\n\n/**\n * @name NoJS Filter Element\n * @docType Directive\n * @tag [nojsFilterElement]\n * @templateData attributeData\n *\n * @description Allow for an input element to perform custom filtering on the associated bound data.\n *\n * @attributes-model-description The object that the results from the source will bind itself to.\n * @attributes-model-type NojsBindModel\n * @attributes-model-value data\n * @attributes-filter-description The name of the type of filtering applied to this element. (Currently only 'search' is supported)\n * @attributes-filter-type String\n * @attributes-prefix-description Specify a prefix to apply to the filter\n * @attributes-prefix-type String\n * @attributes-suffix-desription Specify a suffix to apply to the filter\n * @attributes-suffix-type String\n * @attributes-columns-description Specify the columns in the table that this filter is associated with. (comma separated list 'id,name,description')\n * @attributes-columns-type String\n *\n *\n * <input type='text' #element filterElement [model]='data' filter='search'\n * columns='id,buyer_name' prefix='*' suffix='*' placeholder='Search Orders'>\n */\n@Directive({\n    selector: '[kbFilterElement]',\n    exportAs: 'filterElement'\n})\nexport class KinibindFilterElementDirective {\n\n    @Input('model') data: KinibindModel;\n    @Input('filter') filter: string;\n    @Input('prefix') prefix: string;\n    @Input('suffix') suffix: string;\n    @Input('columns') columns: string;\n    @Input('filterClass') filterClass: string;\n    @Input('mode') mode: string;\n    @Input('dateFormat') dateFormat: string;\n\n    constructor() {\n    }\n\n    /**\n     * This is exposed to the element we are attached to as a template variable,\n     * so that we can update the filters with the new filter value.\n     *\n     * @param filterValue\n     */\n    public updateFilter(filterValue) {\n        this.constructFilterObject(filterValue);\n    }\n\n    private constructFilterObject(filterValue) {\n        if (filterValue === null) {\n            delete this.data.filters.filterObject[this.filter];\n        } else {\n            let newValue = filterValue;\n            if (this.prefix) {\n                newValue = this.prefix + newValue;\n            }\n\n            if (this.suffix) {\n                newValue = newValue + this.suffix;\n            }\n\n            this.data.filters.filterObject[this.filter] = {\n                filterValue: newValue,\n                filterColumns: this.columns ? this.columns.split(',') : []\n            };\n\n            if (this.mode) {\n                this.data.filters.filterObject[this.filter].filterMode = this.mode;\n            }\n\n            if (this.dateFormat) {\n                this.data.filters.filterObject[this.filter].filterDateFormat = this.dateFormat;\n            }\n        }\n\n        this.data.filters.changes.next(true);\n    }\n}\n","import {\n    Directive, EventEmitter, HostListener, Input, OnInit, Output\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { KinibindModel } from '../shared/kinibind.model';\nimport { Router } from '@angular/router';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\n\n/**\n *\n * @name NoJS Bind Save\n * @docType Directive\n * @tag [nojsBindSave]\n * @templateData attributeData\n *\n * @description The NoJS Bind Save Directive allows for simple saving of data back to the server. This will return the updated contents of either the NojsBindModel.results array or the NojsBindModel.item object to the server for processing.\n *\n * @attributes-store-description The URL where of the server where the data should be sent for processing.\n * @attributes-store-type String\n * @attributes-storeParams-description Additional parameters to send back to the server with the post request.\n * @attributes-storeParams-type Object\n * @attributes-storeParams-value {param: value}\n * @attributes-storeObjectParam-description The name of the parameter to send the data back with.\n * @attributes-storeObjectParam-type String\n * @attributes-model-description The object that the results from the source will bind itself to.\n * @attributes-model-type NojsBindModel\n * @attributes-model-value data\n * @attributes-savedRoute-description The route to navigate to once the response from the server returns successful.\n * @attributes-savedRoute-type String\n * @attributes-onSave-description This function will be called when the save successfully completes\n * @attributes-onSave-type method\n * @attributes-onError-description This function will be called when an error is returned from the service call.\n * @attributes-onError-type method\n *\n *\n * @exampleDescription Add the nojsBindSave attribute to any element. The associated click event on that element will cause the data to save.\n * <button nojsBindSave store=\"https://someservice/save\" storeObjectParam=\"orders\" [model]=\"data\"\n *   [storeParams]=\"{userId: 200}\" savedRoute=\"/views/users\"\n *   (onSave)=\"callMeOnSave()\" (onError)=\"doSomething()\">\n *   Save\n * </button>\n *\n */\n@Directive({\n    selector: '[kbSave]'\n})\nexport class KinibindSaveDirective implements OnInit {\n\n    @Input('model') model: KinibindModel;\n    @Input('store') storeURL: string;\n    @Input('method') method: string;\n    @Input('savedRoute') savedRoute: string;\n    @Input('withCredentials') withCredentials: boolean;\n\n    @Output('onSave') onSave: EventEmitter<any> = new EventEmitter();\n    @Output('onError') onError: EventEmitter<any> = new EventEmitter();\n\n    @HostListener('click', ['$event']) onClick($event) {\n        this.save();\n    }\n\n    constructor(private http: HttpClient,\n                private router: Router,\n                private kbRequest: KinibindRequestService) {\n\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    private save() {\n        let postParams: any;\n\n        if (this.model) {\n            if (this.model.results.length > 0) {\n                postParams = this.model.results;\n            } else if (this.model.item) {\n                postParams = this.model.item;\n            }\n        }\n\n        const method = this.method || 'POST';\n\n        this.kbRequest.makeRequest(method, this.storeURL,\n            {\n                withCredentials: this.withCredentials || false,\n                params: postParams\n            })\n            .toPromise()\n            .then(results => {\n\n                if (this.savedRoute) {\n                    this.router.navigate([this.savedRoute]);\n                }\n\n                this.onSave.emit({ results: results });\n            })\n            .catch(error => {\n                this.onError.emit(error);\n            });\n    }\n\n}\n","import {\n    Directive, EventEmitter, Input, OnInit, Output\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { of as observableOf } from 'rxjs';\nimport * as _ from 'lodash';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { KinibindModel } from '../shared/kinibind.model';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\n\n/**\n *\n * @name NoJS Form\n * @docType Directive\n * @tag [nojsForm]\n * @templateData attributeData\n *\n * @description The Nojs Form directive allows for data to sourced from a URL and bound to a model, which can then be used to bind to form components. Additional form validation can be added to the form inputs. In order to save data back to the server, a store URL and submit button need to be included in the form markup.\n *\n * @attributes-source-description The URL to load the data asynchronously. Data should be returned in JSON format as either:\n * @attributes-source-type String\n * @attributes-source-value https://someservice/results.json\n * @attributes-source-code {id: 1, name: testing} OR<br>[{id: 1, name: test1}, {id: 2, name: test2}] OR<br>{results: [{id: 1...}, {id: 2...}], totalCount: 2}\n * @attributes-sourceParams-description Parameters object to send with the Source post request.\n * @attributes-sourceParams-type Object\n * @attributes-sourceParams-value {param: value}\n * @attributes-model-description The object that the results from the source will bind itself to.\n * @attributes-model-type NojsBindModel\n * @attributes-model-value data\n * @attributes-store-description The url to send any dirty data back to the server for processing.\n * @attributes-store-type String\n * @attributes-storeParams-description Parameters object to send with the Store post request.\n * @attributes-storeParams-type Object\n * @attributes-storeParams-value {param: value}\n * @attributes-storeObjectParam-description The name of the parameter to send the data back with.\n * @attributes-storeObjectParam-type String\n * @attributes-savedRoute-description The route to navigate to once the response from the server returns successful.\n * @attributes-savedRoute-type String\n * @attributes-dirtyOnly-description In the case where an array of objects are being edited, only send back the objects where containing fields have been changed.\n * @attributes-dirtyOnly-type Boolean (default false)\n * @attributes-onLoad-description Event raised once the data has been loaded successfully.\n * @attributes-onLoad-type method\n * @attributes-onLoadError-description Event raised in the scenario where there is an error loading the data.\n * @attributes-onLoadError-type method\n * @attributes-onSave-description This function will be called when the save successfully completes\n * @attributes-onSave-type method\n * @attributes-onError-description This function will be called when an error is returned from the service call.\n * @attributes-onError-type method\n *\n *\n * @exampleDescription This attribute should only be used in conjunction with a <form> element.\n * <form nojsForm [model]=\"data\" source=\"/POST/Someservice/getOrderData\"\n *   [sourceParams]=\"{orderId: 37}\" store=\"/POST/Someservice/saveOrders\"\n *   storeObjectParam=\"orders\" savedRoute=\"/nojs-core\">\n *\n * <div class=\"form-group\" style=\"padding: 20px\">\n *   <label>ID</label>\n *   <input type=\"text\" name=\"id\" [(ngModel)]=\"data.item.id\" required>\n * </div>\n *\n * <div class=\"form-group\" style=\"padding: 20px\">\n *   <label>Status</label>\n *   <input type=\"text\" name=\"status\" [(ngModel)]=\"data.item.status\">\n * </div>\n *\n * <div class=\"form-group\" style=\"padding: 20px\">\n *   <label>Subtotal</label>\n *   <input type=\"text\" name=\"subtotal\" [(ngModel)]=\"data.item.subtotal\">\n * </div>\n *\n * <div class=\"form-group\" style=\"padding: 20px\">\n *   <label>Taxes</label>\n *   <input type=\"text\" name=\"taxes\" [(ngModel)]=\"data.item.taxes\">\n * </div>\n *\n * <div class=\"form-group\" style=\"padding: 20px\">\n *   <label>Total</label>\n *   <input type=\"text\" name=\"total\" [(ngModel)]=\"data.item.total\">\n * </div>\n *\n * <button type=\"submit\">Save</button>\n * </form>\n *\n */\n@Directive({\n    selector: '[kbForm]'\n})\nexport class KinibindFormDirective implements OnInit {\n\n    @Input('source') url: string;\n    @Input('sourceMethod') sourceMethod: string;\n    @Input('sourceParams') sourceParams: any;\n    @Input('model') data: KinibindModel;\n    @Input('store') storeURL: string;\n    @Input('storeMethod') storeMethod: string;\n    @Input('savedRoute') savedRoute: string;\n    @Input('dirtyOnly') dirtyOnly: boolean;\n    @Input('withCredentials') withCredentials: boolean;\n\n    @Output('onLoad') onLoad: EventEmitter<any> = new EventEmitter<any>();\n    @Output('onLoadError') onLoadError: EventEmitter<any> = new EventEmitter<any>();\n    @Output('onSave') onSave: EventEmitter<any> = new EventEmitter();\n    @Output('onError') onError: EventEmitter<any> = new EventEmitter();\n\n    constructor(private ngForm: NgForm,\n                private router: Router,\n                private kbRequest: KinibindRequestService) {\n\n    }\n\n    ngOnInit(): void {\n        this.initSourceData();\n        this.initSaveData();\n    }\n\n    private initSourceData() {\n        this.data.filters.changes.subscribe(() => this.data.pageOptions.index = 0);\n\n        merge(this.data.filters.changes, this.data.pageOptions.changes)\n            .pipe(\n                startWith({}),\n                switchMap(() => {\n                    return this.getData();\n                }),\n                map((data: any) => {\n                    if (_.isPlainObject(data)) {\n                        if (data.results && _.isArray(data.results)) {\n                            this.data.totalCount = data.totalCount || data.results.length;\n                            return data.results;\n                        } else {\n                            return data;\n                        }\n                    } else if (_.isArray(data)) {\n                        this.data.totalCount = data.length;\n                        return data;\n                    }\n                }),\n                catchError((error) => {\n                    this.onLoadError.emit(error);\n                    return observableOf([]);\n                })\n            ).subscribe(data => {\n            if (_.isPlainObject(data)) {\n                this.data.item = data;\n            } else {\n                this.data.results = data;\n            }\n            this.onLoad.emit({ success: true });\n        });\n    }\n\n    private getData(): Observable<any> {\n        const postParams: any = this.sourceParams || {};\n\n        if (!_.isEmpty(this.data.filters.filterObject)) {\n            postParams.filters = this.data.filters.filterObject;\n        }\n\n        if (this.data.pageOptions.size) {\n            postParams.pageSize = this.data.pageOptions.size;\n            postParams.page = this.data.pageOptions.index;\n        }\n\n        const method = this.sourceMethod ? this.sourceMethod : (this.sourceParams ? 'POST' : 'GET');\n\n        return this.kbRequest.makeRequest(method, this.url, {\n            params: this.sourceParams,\n            withCredentials: this.withCredentials\n        });\n    }\n\n    private initSaveData() {\n        if (this.storeURL) {\n            this.ngForm.ngSubmit.subscribe(() => {\n                if (this.data.results.length > 0) {\n                    if (this.dirtyOnly) {\n                        const dirty = [];\n                        _.forEach(this.ngForm.form.controls, (control, key) => {\n                            if (control.dirty) {\n                                dirty.push(key);\n                            }\n                        });\n                        if (dirty.length > 0) {\n                            this.saveData(dirty);\n                        }\n                    } else {\n                        this.saveData();\n                    }\n\n                } else if (this.data.item && this.ngForm.dirty) {\n                    this.saveData();\n                }\n            });\n        }\n    }\n\n    private saveData(dirty?) {\n        let postParams = {};\n\n        if (dirty) {\n\n            const dirtyObjects = [];\n\n            dirty.forEach(dirtyKey => {\n                const splitKey = dirtyKey.split('-');\n                const dirtyIndex = _.find(splitKey, key => {\n                    return !isNaN(Number(key));\n                });\n                dirtyObjects.push(this.data.results[dirtyIndex]);\n            });\n\n            postParams = dirtyObjects;\n\n        } else {\n            if (this.data.results.length > 0) {\n                postParams = this.data.results;\n            } else if (this.data.item) {\n                postParams = this.data.item;\n            }\n        }\n\n        const method = this.storeMethod ? this.storeMethod : 'POST';\n\n        this.kbRequest.makeRequest(method, this.storeURL,\n            {\n                params: postParams,\n                withCredentials: this.withCredentials\n            })\n            .toPromise()\n            .then(results => {\n\n                if (this.savedRoute) {\n                    this.router.navigate([this.savedRoute]);\n                }\n\n                this.onSave.emit({ results: results });\n            })\n            .catch(error => {\n                this.onError.emit(error);\n            });\n    }\n}\n","import { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\nimport { Directive, Input } from '@angular/core';\n\nexport function matchRegexValidator(match: RegExp): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} => {\n        const matched = match.test(control.value);\n        return !matched ? {'matchRegex': {value: control.value}} : null;\n    };\n}\n\n@Directive({\n    selector: '[kbMatchRegex]',\n    providers: [{provide: NG_VALIDATORS, useExisting: MatchRegexDirective, multi: true}]\n})\nexport class MatchRegexDirective implements Validator {\n    @Input('kbMatchRegex') matchRegex: string;\n\n    validate(control: AbstractControl): {[key: string]: any} {\n        return this.matchRegex ? matchRegexValidator(new RegExp(this.matchRegex, 'i'))(control)\n            : null;\n    }\n}","import { AbstractControl, NG_ASYNC_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\nimport { Directive, Input } from '@angular/core';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\n\n\n@Directive({\n    selector: '[kbRemoteValidate]',\n    providers: [{ provide: NG_ASYNC_VALIDATORS, useExisting: NojsRemoteValidateDirective, multi: true }]\n})\nexport class NojsRemoteValidateDirective implements Validator {\n    @Input('kbRemoteValidate') remoteValidate: string;\n    @Input('method') method: string;\n    @Input('key') key: string;\n    @Input('withCredentials') withCredentials: boolean = false;\n    @Input('remoteParams') remoteParams: any = {};\n\n    constructor(private kbRequest: KinibindRequestService) {\n\n    }\n\n    validate(control: AbstractControl): { [key: string]: any } {\n        return this.remoteValidate ? this.remoteValidateValidator(this.remoteValidate)(control)\n            : null;\n    }\n\n    private remoteValidateValidator(remoteURL: string): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } => {\n\n            if (control.value) {\n\n                const method = this.method ? this.method : (this.remoteParams ? 'POST' : 'GET');\n\n                let url;\n                if (remoteURL.includes('?')) {\n                    url = remoteURL + `&${this.key}=${control.value}`;\n                } else {\n                    url = remoteURL + `?${this.key}=${control.value}`;\n                }\n\n                return this.kbRequest.makeRequest(method, url, {\n                    withCredentials: this.withCredentials,\n                    params: this.remoteParams\n                }).toPromise()\n                    .then(valid => {\n                        return !valid ? { 'remoteValidate': false } : null;\n                    });\n            }\n            return Promise.resolve(null);\n        };\n    }\n\n}","import {\n    Directive, EventEmitter, HostListener, Input, OnInit, Output\n} from '@angular/core';\nimport { KinibindRequestService } from '../shared/kinibind-request.service';\n\n/**\n *\n * @name NoJS Action\n * @docType Directive\n * @tag nojs-action\n * @templateData attributeData\n *\n * @description The NoJS Bind Directive allows for rapid binding of a JSON data source to a model. This should primarily be used for drawing lists of data, where the data does not change as the result of user input. However, this can be used in conjunction with nojsBindSave to send any model changes back to the server. If you are looking to implement Form behaviour, then use nojsForm.\n *\n *\n *\n */\n@Directive({\n    selector: '[kbAction]'\n})\nexport class KinibindActionDirective implements OnInit {\n\n    @Input('actionURL') actionURL: string;\n    @Input('method') method: string;\n    @Input('actionParams') actionParams: any;\n\n    @Output('started') started: EventEmitter<any> = new EventEmitter<any>();\n    @Output('completed') completed: EventEmitter<any> = new EventEmitter<any>();\n    @Output('error') error: EventEmitter<any> = new EventEmitter<any>();\n\n    @HostListener('click', ['$event'])\n    clickEvent(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.started.emit(true);\n\n        const method = this.method ? this.method : (this.actionParams ? 'POST' : 'GET');\n\n        this.kbRequest.makeRequest(method, this.actionURL,\n            {\n                params: this.actionParams\n            })\n            .toPromise()\n            .then(result => {\n                this.completed.emit(result);\n            })\n            .catch(error => {\n                this.error.emit(error);\n            });\n    }\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    ngOnInit(): void {\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { KinibindBindDirective } from './bind/kinibind-bind.directive';\nimport { KinibindFilterComponent } from './filter/kinibind-filter.component';\nimport { KinibindFilterElementDirective } from './filter-element/kinibind-filter-element.directive';\nimport { HttpClientJsonpModule, HttpClientModule } from '@angular/common/http';\nimport { KinibindSaveDirective } from './bind-save/kinibind-save.directive';\nimport { FormsModule } from '@angular/forms';\nimport { KinibindFormDirective } from './form/kinibind-form.directive';\nimport { MatchRegexDirective } from './validators/match-regex.directive';\nimport { NojsRemoteValidateDirective } from './validators/remote-validate.directive';\nimport { KinibindActionDirective } from './action/kinibind-action.directive';\nimport { KinibindRequestService } from './shared/kinibind-request.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        FormsModule,\n        HttpClientJsonpModule\n    ],\n    declarations: [\n        KinibindBindDirective,\n        KinibindFilterComponent,\n        KinibindSaveDirective,\n        KinibindFilterElementDirective,\n        KinibindFormDirective,\n        MatchRegexDirective,\n        NojsRemoteValidateDirective,\n        KinibindActionDirective\n    ],\n    exports: [\n        KinibindBindDirective,\n        KinibindSaveDirective,\n        KinibindFilterComponent,\n        KinibindFilterElementDirective,\n        KinibindFormDirective,\n        MatchRegexDirective,\n        NojsRemoteValidateDirective,\n        KinibindActionDirective\n    ],\n    providers: [\n        KinibindRequestService\n    ]\n})\nexport class NgKinibindModule {\n}\n","import { Subject } from 'rxjs';\n\nexport interface KinibindFilters {\n    changes: Subject<any>;\n    filterObject?: any;\n}\n\n\nexport interface KinibindPageOptions {\n    changes: Subject<any>;\n    size?: number;\n    index?: number;\n    options?: number[];\n}\n\n/**\n * @name KinibindModel\n * @docType Model\n * @description This is the Model that nojs-bind, nojs-filter, nojs-paginator, and nojs-filter-element bind to. It provides a structure that allows for each of these nojs components to manage their own state and data handling.\n * @templateData memberData\n *\n * @members-results-type property: any[]\n * @members-results-description This property will be populated in the event that the results from the service call are in array form.\n * @members-results-defaultValue Array\n * @members-item-type property: any\n * @members-item-description This property will be populated when the returning value from the service call is in object form.\n * @members-item-defaultValue Object\n * @members-totalCount-type property: number\n * @members-totalCount-description Count of the total results\n * @members-totalCount-defaultValue 0\n * @members-offset-type property: number\n * @members-offset-description When limiting results returned from server this values store the current offset.\n * @members-offset-defaultValue 0\n * @members-filters-type property: NojsFilters\n * @members-filters-description This object stores the current filter values used for filtering results on the server.\n * @members-filters-defaultValue { changes: new Subject<any>(), filterObject: {} }\n * @members-pageOptions-type property: NojsPageOptions\n * @members-pageOptions-description This object stores the values used to page the results on the server.\n * @members-pageOptions-defaultValue { changes: new Subject<any>(), size: 10, index: 0, options: [10, 25, 50, 100] }\n * @members-setPageOptions-type method\n * @members-setPageOptions-description This function should be called when paging results need to be updated.\n *\n * @exampleDescription Simply create a new instance of NojsBindModel to make use of this object.\n * const bindModel = new NojsBindModel();\n */\nexport class KinibindModel {\n\n    public results: any[];\n    public item: any;\n    public value: any;\n    public totalCount: number;\n    public offset: number;\n    public filters: KinibindFilters;\n    public pageOptions: KinibindPageOptions;\n\n    constructor(limit?: number, offset?: number) {\n        this.results = [];\n        this.item = {};\n        this.value = '';\n        this.totalCount = 0;\n        this.offset = offset || 0;\n        this.filters = {\n            changes: new Subject<any>(),\n            filterObject: {}\n        };\n        this.pageOptions = {\n            changes: new Subject<any>(),\n            size: limit,\n            index: 1,\n            options: [10, 25, 50, 100]\n        };\n    }\n\n    public setPageOptions(pageSize, pageIndex) {\n        this.pageOptions.size = pageSize;\n        this.pageOptions.index = pageIndex;\n        this.offset = pageSize * pageIndex;\n        this.pageOptions.changes.next(true);\n    }\n\n}\n"]}